class RaceGame
{
   field boolean isRunning;
   field int enemiesCount;
   field PlayerCar player;
   field Array enemies;
   field Array enemySpawnYCoords;
   field Road road;           
   field Random random;     
   field int score;     

   constructor RaceGame new()
   {
      var EnemyCar currentEnemy;
      var int i;

      // initialize player car
      let player = PlayerCar.new(28, 96);

      // initialize enemies
      let enemiesCount = 16;
      let enemies = Array.new(enemiesCount);
      let i = 0;
      while (i < enemiesCount)
      {
         let enemies[i] = EnemyCar.new(16, 16);
         let currentEnemy = enemies[i];
         do currentEnemy.die();

         let i = i + 1;
      }

      // initialize road
      let road = Road.new();

      // initialize enemy spawn coordinates
      let enemySpawnYCoords = Array.new(4);
      let enemySpawnYCoords[0] = 16;
      let enemySpawnYCoords[1] = 80;
      let enemySpawnYCoords[2] = 144;
      let enemySpawnYCoords[3] = 208;

      // initialize player score
      let score = 0;

      return this;
   }

   /** Runs the game: handles the user's inputs and moves the car accordingly */
   method void run()
   {
      var int randomSeed, tick, frame;
      var char key;  // the key currently pressed by the user

      let randomSeed = handleStartGame();
      let random = Random.new(randomSeed);

      let isRunning = true;
      let tick = 0;
      let frame = 0;


      while (isRunning)
      {
         let key = Keyboard.keyPressed();

         if (tick = 5000)
         {
            do drawFrame(key);
            
            let tick = 0;
            let frame = frame + 1;
         }

         if (frame = 10)
         {
            do trySpawnEnemy();

            let frame = 0;
         }

         let tick = tick + 1;
      }

      do Screen.clearScreen();
      do Interface.drawFinalWindow(score);
      do handleEndGame();

     return;
   }

   method int handleStartGame()
   {
      var int randomSeed;
      
      while (~(Keyboard.keyPressed() = 128))  // enter key
      {
         let randomSeed = randomSeed + 1;
         if (randomSeed = 32767)
         {
            let randomSeed = 0;
         }
      }

      return randomSeed;
   }

   method void handleEndGame()
   {
      while (~(Keyboard.keyPressed() = 128)) { } // enter key

      return;
   }

   method void drawFrame(int key)
   {
      if (key = 140) { let isRunning = false; }  // esc key
      if (key = 131) { do player.move(0, -15); }  // up arrow
      if (key = 133) { do player.move(0, 15); }  // down arrow   

      do Screen.clearScreen();
      do road.moveMarking(10);
      do road.drawMarking();
      do player.draw();
      do drawEnemies();
      do Interface.drawPlayerScore(score);

      return;
   }

   method void drawEnemies()
   {
      var EnemyCar currentEnemy;
      var int i;

      let i = 0;
      while (i < enemiesCount)
      {
         let currentEnemy = enemies[i];

         if (currentEnemy.isAlive())
         {
            do currentEnemy.move(10, 0);

            if (~(currentEnemy.onScreen()))
            {
               let score = score + 1;
               do currentEnemy.die();
            }
            
            else
            {
               do tryFindConflict(currentEnemy.GetX(), currentEnemy.GetY(), player.GetX(), player.GetY());
            }
            
            do currentEnemy.draw();
         }

         let i = i + 1;
      }

      return;
   }

   method void trySpawnEnemy()
   {
      var EnemyCar newEnemy, currentEnemy;
      var int case, i;

      let case = random.next(10);
      if (case < 4)
      {
         let i = 0;
         let currentEnemy = enemies[i];
         while ((i < (enemiesCount-1)) & (currentEnemy.isAlive()))
         {
            let i = i + 1;
            let currentEnemy = enemies[i];
         }

         if (~(currentEnemy.isAlive()))
         {
            do currentEnemy.reborn(0, enemySpawnYCoords[case]);
         }
      }

      return;
   }

   method void tryFindConflict(int xEnemy, int yEnemy, int xPlayer, int yPlayer)
   {
      var int leftEnemyX, topLeftEnemyY, bottomLeftEnemyY;
      var int rightPlayerX, topRightPlayerY, bottomRightPlayerY;

      var boolean isConflictFromBelow, isConflictFromAbove;

      let leftEnemyX = xEnemy + 47;
      let topLeftEnemyY = yEnemy;
      let bottomLeftEnemyY = yEnemy + 31;

      let rightPlayerX = xPlayer;
      let topRightPlayerY = yPlayer;
      let bottomRightPlayerY = yPlayer + 31;

      let isConflictFromBelow = (~(topRightPlayerY > bottomLeftEnemyY)) & (~(topRightPlayerY < topLeftEnemyY)) & (~(rightPlayerX > leftEnemyX));
      let isConflictFromAbove = (~(bottomRightPlayerY > bottomLeftEnemyY)) & (~(bottomRightPlayerY < topLeftEnemyY)) & (~(rightPlayerX > leftEnemyX));

      if (isConflictFromBelow | isConflictFromAbove)
      {
         let isRunning = false;
      }

      return;
   }

   method int GetScore()
   {
      return score;
   }
   
   method void dispose()
   {
      do player.dispose();
      do Memory.deAlloc(enemies);
      do Memory.deAlloc(enemySpawnYCoords);
      do road.dispose();
      do random.dispose();
      do Memory.deAlloc(this);
      
      return;
   }
}



