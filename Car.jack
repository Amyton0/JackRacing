class Car 
{
   field int x, y;

   constructor Car new(int Ax, int Ay)
   {
      let x = Ax;
      let y = Ay;
      do draw();
      return this;
   }

   method void dispose()
   {
      do Memory.deAlloc(this);
      return;
   }

   method void draw()
    {
        var int location;
        var int memAddress; 

        let location = (32 * y) + x;
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 195);
        do Memory.poke(memAddress +32, 255);
        do Memory.poke(memAddress +64, 255);
        do Memory.poke(memAddress +96, 255);
        do Memory.poke(memAddress +128, 255);
        do Memory.poke(memAddress +160, 255);
        do Memory.poke(memAddress +192, 255);
        do Memory.poke(memAddress +224, 255);
        do Memory.poke(memAddress +256, 255);
        do Memory.poke(memAddress +288, 255);
        do Memory.poke(memAddress +320, 255);
        do Memory.poke(memAddress +352, 255);
        do Memory.poke(memAddress +384, 255);
        do Memory.poke(memAddress +416, 255);
        do Memory.poke(memAddress +448, 255);
        return;
    }

   method void erase()
   {
        var int location;
        var int memAddress; 

        let location = (32 * y) + x;
        let memAddress = 16384+location;
        // column 0
        do Memory.poke(memAddress, 0);
        do Memory.poke(memAddress +32, 0);
        do Memory.poke(memAddress +64, 0);
        do Memory.poke(memAddress +96, 0);
        do Memory.poke(memAddress +128, 0);
        do Memory.poke(memAddress +160, 0);
        do Memory.poke(memAddress +192, 0);
        do Memory.poke(memAddress +224, 0);
        do Memory.poke(memAddress +256, 0);
        do Memory.poke(memAddress +288, 0);
        do Memory.poke(memAddress +320, 0);
        do Memory.poke(memAddress +352, 0);
        do Memory.poke(memAddress +384, 0);
        do Memory.poke(memAddress +416, 0);
        do Memory.poke(memAddress +448, 0);
      return;
   }

   method void move(int direction)
   {
      if (direction = 1) { do moveForward(1); }
      if (direction = 2) { do moveSide(1); }
      if (direction = 3) { do moveForward(-1); }
      if (direction = 4) { do moveSide(-1); }
      return;
   }

   method void moveForward(int dy)
   {
    var int location;
    var int memAddress; 
    if ((y - dy) > 1 & (y + 16 - dy) < 255)
    {
        do erase();
        let y = y - dy;
        let location = (32 * y) + x;
        do draw();
    }
    return;
   }

   method void moveSide(int dx) {
    var int memAddress; 
    var int location;
    if ((x + dx) > 1 & (x + 8 + dx) < 510)
    {   
        do erase(); 
        let x = x + dx;
        let location = (32 * y) + x;
        do draw();
      }
      return;
   }
}
