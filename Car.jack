class Car 
{
   field int x, y, multIndex;
   field Array locations, values, multipliers;

   constructor Car new(int Ax, int Ay)
   {
      let x = Ax;
      let y = Ay;

      let locations = Array.new(15);
      let locations[0] = 0;
      let locations[1] = 32;
      let locations[2] = 64;
      let locations[3] = 96;
      let locations[4] = 128;
      let locations[5] = 160;
      let locations[6] = 192;
      let locations[7] = 224;
      let locations[8] = 256;
      let locations[9] = 288;
      let locations[10] = 320;
      let locations[11] = 352;
      let locations[12] = 384;
      let locations[13] = 416;
      let locations[14] = 448;

      let values = Array.new(15);
      let values[0] = 195;
      let values[1] = 255;
      let values[2] = 255;
      let values[3] = 255;
      let values[4] = 255;
      let values[5] = 255;
      let values[6] = 255;
      let values[7] = 255;
      let values[8] = 255;
      let values[9] = 255;
      let values[10] = 255;
      let values[11] = 255;
      let values[12] = 255;
      let values[13] = 255;
      let values[14] = 255;

      let multipliers = Array.new(9);
      let multipliers[0] = 1;
      let multipliers[1] = 2;
      let multipliers[2] = 4;
      let multipliers[3] = 8;
      let multipliers[4] = 16;
      let multipliers[5] = 32;
      let multipliers[6] = 64;
      let multipliers[7] = 128;
      let multipliers[8] = -1;
      
      do draw();
      return this;
   }

   method void dispose()
   {
      do Memory.deAlloc(this);
      return;
   }

   method void draw()
    {
        var int location;
        var int memAddress; 
        var int i;

        let location = (32 * y) + x;
        let memAddress = 16384+location;
        
        let i = 0;
        while (i < 15)
        {
         do Memory.poke(memAddress + locations[i], values[i] * multipliers[multIndex]);
         let i = i + 1;
        }

        return;
    }

   method void erase()
   {
        var int location;
        var int memAddress; 
        var int i;

        let location = (32 * y) + x;
        let memAddress = 16384+location;
        // column 0
        let i = 0;
        while (i < 15)
        {
         do Memory.poke(memAddress + locations[i], 0);
         let i = i + 1;
        }
      return;
   }

   method void move(int direction)
   {
      if (direction = 1) { do moveForward(1); }
      if (direction = 2) { do moveSide(1); }
      if (direction = 3) { do moveForward(-1); }
      if (direction = 4) { do moveSide(-1); }
      return;
   }

   method void moveForward(int dy)
   {
    var int location;
    var int memAddress; 
    if ((y - dy) > 1 & (y + 16 - dy) < 255)
    {
        do erase();
        let y = y - dy;
        let location = (32 * y) + x;
        do draw();
    }
    return;
   }

   method void moveSide(int dx) {
    var int memAddress; 
    var int location;
    if ((x + dx) > 1 & (x + 8 + dx) < 510)
    {   
        do erase(); 
        let multIndex = multIndex + dx;

        while (multIndex > 8)
        {
         let multIndex = multIndex - 9;
         let x = x + 1;
        }

        while (multIndex < 0)
        {
         let multIndex = multIndex + 9;
         let x = x - 1;
        }

        let location = (32 * y) + x;
        do draw();
      }
      return;
   }
}
